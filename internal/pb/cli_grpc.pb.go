// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: cli.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CLiApi_AddWhite_FullMethodName    = "/event.CLiApi/AddWhite"
	CLiApi_DelWhite_FullMethodName    = "/event.CLiApi/DelWhite"
	CLiApi_AddBlack_FullMethodName    = "/event.CLiApi/AddBlack"
	CLiApi_DelBlack_FullMethodName    = "/event.CLiApi/DelBlack"
	CLiApi_ResetBacket_FullMethodName = "/event.CLiApi/ResetBacket"
	CLiApi_GetList_FullMethodName     = "/event.CLiApi/GetList"
)

// CLiApiClient is the client API for CLiApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CLiApiClient interface {
	AddWhite(ctx context.Context, in *IP, opts ...grpc.CallOption) (*Responce, error)
	DelWhite(ctx context.Context, in *IP, opts ...grpc.CallOption) (*Responce, error)
	AddBlack(ctx context.Context, in *IP, opts ...grpc.CallOption) (*Responce, error)
	DelBlack(ctx context.Context, in *IP, opts ...grpc.CallOption) (*Responce, error)
	ResetBacket(ctx context.Context, in *Backet, opts ...grpc.CallOption) (*Responce, error)
	GetList(ctx context.Context, in *TypeList, opts ...grpc.CallOption) (*List, error)
}

type cLiApiClient struct {
	cc grpc.ClientConnInterface
}

func NewCLiApiClient(cc grpc.ClientConnInterface) CLiApiClient {
	return &cLiApiClient{cc}
}

func (c *cLiApiClient) AddWhite(ctx context.Context, in *IP, opts ...grpc.CallOption) (*Responce, error) {
	out := new(Responce)
	err := c.cc.Invoke(ctx, CLiApi_AddWhite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cLiApiClient) DelWhite(ctx context.Context, in *IP, opts ...grpc.CallOption) (*Responce, error) {
	out := new(Responce)
	err := c.cc.Invoke(ctx, CLiApi_DelWhite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cLiApiClient) AddBlack(ctx context.Context, in *IP, opts ...grpc.CallOption) (*Responce, error) {
	out := new(Responce)
	err := c.cc.Invoke(ctx, CLiApi_AddBlack_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cLiApiClient) DelBlack(ctx context.Context, in *IP, opts ...grpc.CallOption) (*Responce, error) {
	out := new(Responce)
	err := c.cc.Invoke(ctx, CLiApi_DelBlack_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cLiApiClient) ResetBacket(ctx context.Context, in *Backet, opts ...grpc.CallOption) (*Responce, error) {
	out := new(Responce)
	err := c.cc.Invoke(ctx, CLiApi_ResetBacket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cLiApiClient) GetList(ctx context.Context, in *TypeList, opts ...grpc.CallOption) (*List, error) {
	out := new(List)
	err := c.cc.Invoke(ctx, CLiApi_GetList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CLiApiServer is the server API for CLiApi service.
// All implementations must embed UnimplementedCLiApiServer
// for forward compatibility
type CLiApiServer interface {
	AddWhite(context.Context, *IP) (*Responce, error)
	DelWhite(context.Context, *IP) (*Responce, error)
	AddBlack(context.Context, *IP) (*Responce, error)
	DelBlack(context.Context, *IP) (*Responce, error)
	ResetBacket(context.Context, *Backet) (*Responce, error)
	GetList(context.Context, *TypeList) (*List, error)
	mustEmbedUnimplementedCLiApiServer()
}

// UnimplementedCLiApiServer must be embedded to have forward compatible implementations.
type UnimplementedCLiApiServer struct {
}

func (UnimplementedCLiApiServer) AddWhite(context.Context, *IP) (*Responce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddWhite not implemented")
}
func (UnimplementedCLiApiServer) DelWhite(context.Context, *IP) (*Responce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelWhite not implemented")
}
func (UnimplementedCLiApiServer) AddBlack(context.Context, *IP) (*Responce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBlack not implemented")
}
func (UnimplementedCLiApiServer) DelBlack(context.Context, *IP) (*Responce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelBlack not implemented")
}
func (UnimplementedCLiApiServer) ResetBacket(context.Context, *Backet) (*Responce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetBacket not implemented")
}
func (UnimplementedCLiApiServer) GetList(context.Context, *TypeList) (*List, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedCLiApiServer) mustEmbedUnimplementedCLiApiServer() {}

// UnsafeCLiApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CLiApiServer will
// result in compilation errors.
type UnsafeCLiApiServer interface {
	mustEmbedUnimplementedCLiApiServer()
}

func RegisterCLiApiServer(s grpc.ServiceRegistrar, srv CLiApiServer) {
	s.RegisterService(&CLiApi_ServiceDesc, srv)
}

func _CLiApi_AddWhite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IP)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CLiApiServer).AddWhite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CLiApi_AddWhite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CLiApiServer).AddWhite(ctx, req.(*IP))
	}
	return interceptor(ctx, in, info, handler)
}

func _CLiApi_DelWhite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IP)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CLiApiServer).DelWhite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CLiApi_DelWhite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CLiApiServer).DelWhite(ctx, req.(*IP))
	}
	return interceptor(ctx, in, info, handler)
}

func _CLiApi_AddBlack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IP)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CLiApiServer).AddBlack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CLiApi_AddBlack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CLiApiServer).AddBlack(ctx, req.(*IP))
	}
	return interceptor(ctx, in, info, handler)
}

func _CLiApi_DelBlack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IP)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CLiApiServer).DelBlack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CLiApi_DelBlack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CLiApiServer).DelBlack(ctx, req.(*IP))
	}
	return interceptor(ctx, in, info, handler)
}

func _CLiApi_ResetBacket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Backet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CLiApiServer).ResetBacket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CLiApi_ResetBacket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CLiApiServer).ResetBacket(ctx, req.(*Backet))
	}
	return interceptor(ctx, in, info, handler)
}

func _CLiApi_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TypeList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CLiApiServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CLiApi_GetList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CLiApiServer).GetList(ctx, req.(*TypeList))
	}
	return interceptor(ctx, in, info, handler)
}

// CLiApi_ServiceDesc is the grpc.ServiceDesc for CLiApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CLiApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "event.CLiApi",
	HandlerType: (*CLiApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddWhite",
			Handler:    _CLiApi_AddWhite_Handler,
		},
		{
			MethodName: "DelWhite",
			Handler:    _CLiApi_DelWhite_Handler,
		},
		{
			MethodName: "AddBlack",
			Handler:    _CLiApi_AddBlack_Handler,
		},
		{
			MethodName: "DelBlack",
			Handler:    _CLiApi_DelBlack_Handler,
		},
		{
			MethodName: "ResetBacket",
			Handler:    _CLiApi_ResetBacket_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _CLiApi_GetList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cli.proto",
}
